# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: EXGW
custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migration: true
    migration:
      dir: ./migrations
  stage: "${opt:stage, self:provider.stage}"
plugins: 
 - serverless-dynamodb-local
 - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  # DynamoDBの利用の許可
  iamRoleStatements:
    -  Effect: 'Allow'
       Action:
         - 'dynamodb:PutItem'
         - 'dynamodb:GetItem'
         - 'dynamodb:Scan'
       Resource: '*'
    -  Effect: 'Allow'
       Action:
         - 'logs:CreateLogGroup'
         - 'logs:CreateLogStream'
         - 'logs:PutLogEvents'
       Resource: 'arn:aws:logs:*:*:*'

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  strolydata:
    handler: gateway.strolydata
    timeout: 10
    events:
      - http:
          path: stroly/dat/{mapid}
          method: get
          integration: lambda-proxy
          cors: true

  strolyimage:
    handler: gateway.strolyimage
    timeout: 10
    events:
      - http:
          path: stroly/img/{mapid}/{zoom}/{x}/{y}
          method: get
          integration: lambda-proxy
          cors: true

  drumseydata:
    handler: gateway.drumseydata
    timeout: 10
    events:
      - http:
          path: drumsey/dat/{mapid}
          method: get
          integration: lambda-proxy
          cors: true

  drumseyimage:
    handler: gateway.drumseyimage
    timeout: 10
    events:
      - http:
          path: drumsey/img/{mapid}/{zoom}/{x}/{y}
          method: get
          integration: lambda-proxy
          cors: true

  warperdata:
    handler: gateway.warperdata
    timeout: 10
    events:
      - http:
          path: warper/dat/{mapid}
          method: get
          integration: lambda-proxy
          cors: true

  warperimage:
    handler: gateway.warperimage
    timeout: 10
    events:
      - http:
          path: warper/img/{mapid}/{zoom}/{x}/{y}
          method: get
          integration: lambda-proxy
          cors: true

# DynamoDB Tableの作成
resources:
  Resources:
    EXGWDATA:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: exgw_data_${self:custom.stage}
        KeySchema:
          - AttributeName: mapid
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: mapid
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
